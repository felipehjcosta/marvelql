buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detekt_version"
        classpath "org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:$gradle_testsets_plugin"
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadow_jar_plugin"
        classpath "com.bmuschko:gradle-docker-plugin:$gradle_docker_plugin"
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlinx-serialization'
apply plugin: 'application'
apply plugin: "io.gitlab.arturbosch.detekt"
apply plugin: "org.unbroken-dome.test-sets"
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: "com.bmuschko.docker-remote-api"

group 'marvelql'
version '0.0.1'
mainClassName = "io.ktor.server.netty.EngineMain"

def marvelPrivateKey = hasProperty('MARVEL_PRIVATE_KEY') ? MARVEL_PRIVATE_KEY : System.getenv('MARVEL_PRIVATE_KEY')
def marvelPublicKey = hasProperty('MARVEL_PUBLIC_KEY') ? MARVEL_PUBLIC_KEY : System.getenv('MARVEL_PUBLIC_KEY')

shadowJar {
    archiveName = "$baseName.$extension"
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

task createDockerfile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile) {
    destFile = project.file('build/docker/Dockerfile')
    from 'openjdk:8-jre-alpine'
    label(['maintainer': 'Felipe Costa "felipe.h.j.costa@gmail.com"'])
    copyFile shadowJar.archiveName, '/app/app.jar'
    entryPoint 'java'
    defaultCommand '-jar', '/app/app.jar'
    exposePort 8080
    runCommand 'apk --update --no-cache add curl'
    instruction 'HEALTHCHECK CMD curl -f http://localhost:8080/health || exit 1'
}

task syncArchive(type: Sync) {
    dependsOn shadowJar
    from shadowJar.archivePath
    into createDockerfile.destFile.get().asFile.parentFile
}

createDockerfile.dependsOn syncArchive

task buildImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
    dependsOn createDockerfile
    inputDir = createDockerfile.destFile.get().asFile.parentFile
    tags.add('felipehjcosta/marvelql:latest')
}

task createContainer(type: com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer) {
    dependsOn buildImage
    targetImageId buildImage.getImageId()
    portBindings = ['8080:8080']
    envVars = [MARVEL_PRIVATE_KEY: marvelPrivateKey, MARVEL_PUBLIC_KEY: marvelPublicKey]
    autoRemove = true
}

task startContainer(type: com.bmuschko.gradle.docker.tasks.container.DockerStartContainer) {
    dependsOn createContainer
    targetContainerId createContainer.getContainerId()
}

task startAndWaitContainer(type: com.bmuschko.gradle.docker.tasks.container.extras.DockerWaitHealthyContainer) {
    dependsOn startContainer
    awaitStatusTimeout = 60
    targetContainerId createContainer.getContainerId()
}

task stopContainer(type: com.bmuschko.gradle.docker.tasks.container.DockerStopContainer) {
    targetContainerId createContainer.getContainerId()
}

task removeContainer(type: com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer) {
    dependsOn stopContainer
    targetContainerId startContainer.getContainerId()
    force = true
}

task removeImage(type: com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage) {
    dependsOn removeContainer
    targetImageId buildImage.getImageId()
    force = true
}

testSets {
    systemTest
}

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    systemTest.kotlin.srcDirs = ['systemTest']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testResources']
    systemTest.resources.srcDirs = ['systemTestResources']
}

test {
    useJUnitPlatform()
}

systemTest {
    useJUnitPlatform {
        includeEngines 'spek2'
    }

    dependsOn startAndWaitContainer
    finalizedBy stopContainer
}

check.dependsOn systemTest

repositories {
    mavenLocal()
    jcenter()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-gson:$ktor_version"
    implementation "com.github.pgutkowski:kgraphql:$kgraphql_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"

    implementation "io.ktor:ktor-client-apache:$ktor_version"
    implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
    implementation 'com.github.swordglowsblue:haven-json:1.1.2'
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlin_serialization_version"

    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testImplementation "org.spekframework.spek2:spek-dsl-jvm:2.0.0-rc.1"
    testRuntimeOnly "org.spekframework.spek2:spek-runner-junit5:2.0.0-rc.1"
    testImplementation "io.mockk:mockk:1.8.13.kotlin13"
    testImplementation 'com.willowtreeapps.assertk:assertk-jvm:0.13'
    testImplementation "com.squareup.okhttp3:mockwebserver:3.12.1"

    systemTestImplementation "org.spekframework.spek2:spek-dsl-jvm:2.0.0-rc.1"
    systemTestRuntimeOnly "org.spekframework.spek2:spek-runner-junit5:2.0.0-rc.1"
    systemTestImplementation "com.github.kittinunf.fuel:fuel:1.12.0"
    systemTestImplementation "com.willowtreeapps.assertk:assertk-jvm:0.12"
}

detekt {
    toolVersion = "1.0.0-RC12"
    input = files("src")
    filters = ".*/resources/.*,.*/build/.*"
    config = files("default-detekt-config.yml")
}

run.doFirst {
    environment 'MARVEL_PUBLIC_KEY', marvelPublicKey
    environment 'MARVEL_PRIVATE_KEY', marvelPrivateKey
}
